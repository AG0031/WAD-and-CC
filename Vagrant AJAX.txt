# JavaScript User Registration with AJAX and Local Storage

Here's a complete solution for a user registration system that stores data in local storage, uses AJAX to post data, and displays the results on a new page. I'll provide instructions for setting it up on a Vagrant Ubuntu 22.04 machine.

## Project Structure

```
/user-registration-app/
├── index.html          # Registration form
├── users.html          # Display page
├── script.js           # Main JavaScript
├── server.js           # Simple Node.js server
└── vagrantfile         # Vagrant configuration
```

## 1. index.html (Registration Form)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Registration</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
        form { display: grid; gap: 15px; }
        label { font-weight: bold; }
        input, button { padding: 8px; }
        button { background: #4CAF50; color: white; border: none; cursor: pointer; }
        button:hover { background: #45a049; }
    </style>
</head>
<body>
    <h1>User Registration</h1>
    <form id="registrationForm">
        <div>
            <label for="name">Full Name:</label>
            <input type="text" id="name" required>
        </div>
        <div>
            <label for="email">Email:</label>
            <input type="email" id="email" required>
        </div>
        <div>
            <label for="phone">Phone:</label>
            <input type="tel" id="phone">
        </div>
        <div>
            <label for="dob">Date of Birth:</label>
            <input type="date" id="dob">
        </div>
        <button type="submit">Register</button>
    </form>

    <p><a href="users.html">View Registered Users</a></p>

    <script src="script.js"></script>
</body>
</html>
```

## 2. users.html (Display Page)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registered Users</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
    </style>
</head>
<body>
    <h1>Registered Users</h1>
    <div id="usersList">
        <table id="usersTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Date of Birth</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <p><a href="index.html">Back to Registration</a></p>

    <script src="script.js"></script>
</body>
</html>
```

## 3. script.js (Main JavaScript)

```javascript
// Store users in local storage
const STORAGE_KEY = 'registeredUsers';

// Function to get users from local storage
function getUsers() {
    const usersJSON = localStorage.getItem(STORAGE_KEY);
    return usersJSON ? JSON.parse(usersJSON) : [];
}

// Function to save users to local storage
function saveUsers(users) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(users));
}

// Registration form handling
if (document.getElementById('registrationForm')) {
    const form = document.getElementById('registrationForm');
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Get form values
        const user = {
            name: document.getElementById('name').value,
            email: document.getElementById('email').value,
            phone: document.getElementById('phone').value,
            dob: document.getElementById('dob').value,
            timestamp: new Date().toISOString()
        };
        
        // Get existing users
        const users = getUsers();
        
        // Add new user
        users.push(user);
        
        // Save to local storage
        saveUsers(users);
        
        // Send data to server via AJAX
        sendDataToServer(user);
        
        // Reset form
        form.reset();
        
        // Show success message
        alert('Registration successful!');
    });
}

// Display users on users.html
if (document.getElementById('usersTable')) {
    const users = getUsers();
    const tbody = document.querySelector('#usersTable tbody');
    
    if (users.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4">No users registered yet.</td></tr>';
    } else {
        tbody.innerHTML = users.map(user => `
            <tr>
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${user.phone || 'N/A'}</td>
                <td>${user.dob || 'N/A'}</td>
            </tr>
        `).join('');
    }
}

// AJAX function to send data to server
function sendDataToServer(user) {
    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/register', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                console.log('Data successfully sent to server:', xhr.responseText);
            } else {
                console.error('Error sending data to server:', xhr.statusText);
            }
        }
    };
    
    xhr.send(JSON.stringify(user));
}
```

## 4. server.js (Simple Node.js Server)

```javascript
const http = require('http');
const fs = require('fs');
const path = require('path');

const PORT = 3000;
const server = http.createServer((req, res) => {
    // Serve static files
    if (req.method === 'GET') {
        let filePath = '.' + req.url;
        if (filePath === './') filePath = './index.html';
        
        const extname = path.extname(filePath);
        let contentType = 'text/html';
        
        switch (extname) {
            case '.js':
                contentType = 'text/javascript';
                break;
            case '.css':
                contentType = 'text/css';
                break;
            case '.json':
                contentType = 'application/json';
                break;
        }
        
        fs.readFile(filePath, (err, content) => {
            if (err) {
                if (err.code === 'ENOENT') {
                    // Page not found
                    fs.readFile('./404.html', (err, content) => {
                        res.writeHead(404, { 'Content-Type': 'text/html' });
                        res.end(content, 'utf-8');
                    });
                } else {
                    // Server error
                    res.writeHead(500);
                    res.end(`Server Error: ${err.code}`);
                }
            } else {
                // Success
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(content, 'utf-8');
            }
        });
    }
    
    // Handle POST request for registration
    if (req.method === 'POST' && req.url === '/register') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const user = JSON.parse(body);
                console.log('Received user data:', user);
                
                // Here you would typically save to a database
                // For this example, we'll just log it
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'User data received', user }));
            } catch (error) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Invalid data' }));
            }
        });
    }
});

server.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
```

## 5. Vagrantfile

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"  # Ubuntu 22.04
  config.vm.network "forwarded_port", guest: 3000, host: 3000
  config.vm.boot_timeout = 600  # 600 seconds (10 minutes)
  
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
    vb.cpus=4
  end
  
  config.vm.provision "shell", inline: <<-SHELL
    # Update system
    apt-get update -y
    
    # Install Node.js and npm
    apt-get install -y nodejs npm
    
    # Install git (optional)
    apt-get install -y git
    
    # Check versions
    echo "Node.js version: $(nodejs --version)"
    echo "npm version: $(npm --version)"
  SHELL
end

## Setup Instructions

1. Create a new directory for your project and add all the files above.

2. Initialize the Vagrant machine:
   ```bash
   vagrant up
   ```

3. SSH into the Vagrant machine:
   ```bash
   vagrant ssh
   ```

4. Inside the Vagrant machine, navigate to your project directory (you may need to place it in the shared `/vagrant` folder or use `vagrant rsync` for file synchronization).

5. Start the Node.js server:
   ```bash
   sudo apt update
   sudo apt install -y nodejs npm
   npm init -y
   node server.js
   ```

6. On your host machine, open a web browser and navigate to:
   ```
   http://localhost:3000
   ```

## How It Works

1. Users fill out the registration form on `index.html`
2. The form data is:
   - Stored in the browser's local storage
   - Sent to the server via AJAX POST
3. Users can view all registered users on `users.html`
4. The data persists between page reloads thanks to local storage
5. The server logs all received data to the console

This solution provides a complete client-server implementation with persistence that works on your Vagrant Ubuntu 22.04 machine.